akka {

  loglevel = "OFF" #"OFF" "INFO" "DEBUG"
  stdout-loglevel = "OFF" #"OFF" "INFO" "DEBUG"

  actor {
    provider = "local" # "local", "remote", or "cluster"
    default-dispatcher {
      throughput = 10
    }
  }

  remote {
    netty.tcp.port = 4711 // The port clients should connect to. Default is 2552.
  }

  http {
    server {
      idle-timeout = infinite
    }

    websocket {
      # periodic keep alive may be implemented using by sending Ping frames
      # upon which the other side is expected to reply with a Pong frame,
      # or by sending a Pong frame, which serves as unidirectional heartbeat.
      # Valid values:
      #   ping - default, for bi-directional ping/pong keep-alive heartbeating
      #   pong - for uni-directional pong keep-alive heartbeating
      #
      # It is also possible to provide a payload for each heartbeat message,
      # this setting can be configured programatically by modifying the websocket settings.
      # See: https://doc.akka.io/docs/akka-http/current/server-side/websocket-support.html
      periodic-keep-alive-mode = ping

      # Interval for sending periodic keep-alives
      # The frame sent will be the one configured in akka.http.server.websocket.periodic-keep-alive-mode
      # `infinite` by default, or a duration that is the max idle interval after which an keep-alive frame should be sent
      # The value `infinite` means that *no* keep-alive heartbeat will be sent, as: "the allowed idle time is infinite"
      periodic-keep-alive-max-idle = infinite
    }
  }
}